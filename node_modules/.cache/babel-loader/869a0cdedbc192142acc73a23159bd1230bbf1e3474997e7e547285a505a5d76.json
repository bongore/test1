{"ast":null,"code":"import { hexToBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\n/**\n * @description Converts an [EIP-2098 compact signature](https://eips.ethereum.org/EIPS/eip-2098) into signature format.\n *\n * @param signature The compact signature to convert.\n * @returns The compact signature in signature format.\n *\n * @example\n * compactSignatureToHex({\n *   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   yParityAndS: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * })\n * // {\n * //   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n * //   s: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * //   v: 27n\n * // }\n */\nexport function compactSignatureToSignature(_ref) {\n  let {\n    r,\n    yParityAndS\n  } = _ref;\n  const yParityAndS_bytes = hexToBytes(yParityAndS);\n  const v = yParityAndS_bytes[0] & 0x80 ? 28n : 27n;\n  const s = yParityAndS_bytes;\n  if (v === 28n) s[0] &= 0x7f;\n  return {\n    r,\n    s: bytesToHex(s),\n    v\n  };\n}","map":{"version":3,"names":["hexToBytes","bytesToHex","compactSignatureToSignature","_ref","r","yParityAndS","yParityAndS_bytes","v","s"],"sources":["C:\\Users\\takap\\OneDrive - Chiba Institute of Technology\\デスクトップ\\web3-sotuken\\node_modules\\viem\\utils\\signature\\compactSignatureToSignature.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { CompactSignature, Signature } from '../../types/misc.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\nexport type CompactSignatureToSignatureErrorType =\n  | BytesToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * @description Converts an [EIP-2098 compact signature](https://eips.ethereum.org/EIPS/eip-2098) into signature format.\n *\n * @param signature The compact signature to convert.\n * @returns The compact signature in signature format.\n *\n * @example\n * compactSignatureToHex({\n *   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   yParityAndS: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * })\n * // {\n * //   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n * //   s: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * //   v: 27n\n * // }\n */\nexport function compactSignatureToSignature({\n  r,\n  yParityAndS,\n}: CompactSignature): Signature {\n  const yParityAndS_bytes = hexToBytes(yParityAndS)\n  const v = yParityAndS_bytes[0] & 0x80 ? 28n : 27n\n  const s = yParityAndS_bytes\n  if (v === 28n) s[0] &= 0x7f\n  return { r, s: bytesToHex(s), v }\n}\n"],"mappings":"AAEA,SAAmCA,UAAU,QAAQ,wBAAwB;AAC7E,SAAmCC,UAAU,QAAQ,sBAAsB;AAO3E;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUC,2BAA2BA,CAAAC,IAAA,EAGxB;EAAA,IAHyB;IAC1CC,CAAC;IACDC;EAAW,CACM,GAAAF,IAAA;EACjB,MAAMG,iBAAiB,GAAGN,UAAU,CAACK,WAAW,CAAC;EACjD,MAAME,CAAC,GAAGD,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG;EACjD,MAAME,CAAC,GAAGF,iBAAiB;EAC3B,IAAIC,CAAC,KAAK,GAAG,EAAEC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI;EAC3B,OAAO;IAAEJ,CAAC;IAAEI,CAAC,EAAEP,UAAU,CAACO,CAAC,CAAC;IAAED;EAAC,CAAE;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}