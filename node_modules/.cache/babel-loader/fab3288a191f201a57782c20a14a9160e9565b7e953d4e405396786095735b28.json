{"ast":null,"code":"import { InvalidLegacyVError } from '../../errors/transaction.js';\nimport { concatHex } from '../data/concat.js';\nimport { trim } from '../data/trim.js';\nimport { toHex } from '../encoding/toHex.js';\nimport { toRlp } from '../encoding/toRlp.js';\nimport { assertTransactionEIP1559, assertTransactionEIP2930, assertTransactionLegacy } from './assertTransaction.js';\nimport { getTransactionType } from './getTransactionType.js';\nimport { serializeAccessList } from './serializeAccessList.js';\nexport function serializeTransaction(transaction, signature) {\n  const type = getTransactionType(transaction);\n  if (type === 'eip1559') return serializeTransactionEIP1559(transaction, signature);\n  if (type === 'eip2930') return serializeTransactionEIP2930(transaction, signature);\n  return serializeTransactionLegacy(transaction, signature);\n}\nfunction serializeTransactionEIP1559(transaction, signature) {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data\n  } = transaction;\n  assertTransactionEIP1559(transaction);\n  const serializedAccessList = serializeAccessList(accessList);\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', to !== null && to !== void 0 ? to : '0x', value ? toHex(value) : '0x', data !== null && data !== void 0 ? data : '0x', serializedAccessList];\n  if (signature) {\n    const yParity = (() => {\n      if (signature.v === 0n) return '0x';\n      if (signature.v === 1n) return toHex(1);\n      return signature.v === 27n ? '0x' : toHex(1);\n    })();\n    serializedTransaction.push(yParity, trim(signature.r), trim(signature.s));\n  }\n  return concatHex(['0x02', toRlp(serializedTransaction)]);\n}\nfunction serializeTransactionEIP2930(transaction, signature) {\n  const {\n    chainId,\n    gas,\n    data,\n    nonce,\n    to,\n    value,\n    accessList,\n    gasPrice\n  } = transaction;\n  assertTransactionEIP2930(transaction);\n  const serializedAccessList = serializeAccessList(accessList);\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', gasPrice ? toHex(gasPrice) : '0x', gas ? toHex(gas) : '0x', to !== null && to !== void 0 ? to : '0x', value ? toHex(value) : '0x', data !== null && data !== void 0 ? data : '0x', serializedAccessList];\n  if (signature) {\n    const yParity = (() => {\n      if (signature.v === 0n) return '0x';\n      if (signature.v === 1n) return toHex(1);\n      return signature.v === 27n ? '0x' : toHex(1);\n    })();\n    serializedTransaction.push(yParity, trim(signature.r), trim(signature.s));\n  }\n  return concatHex(['0x01', toRlp(serializedTransaction)]);\n}\nfunction serializeTransactionLegacy(transaction, signature) {\n  const {\n    chainId = 0,\n    gas,\n    data,\n    nonce,\n    to,\n    value,\n    gasPrice\n  } = transaction;\n  assertTransactionLegacy(transaction);\n  let serializedTransaction = [nonce ? toHex(nonce) : '0x', gasPrice ? toHex(gasPrice) : '0x', gas ? toHex(gas) : '0x', to !== null && to !== void 0 ? to : '0x', value ? toHex(value) : '0x', data !== null && data !== void 0 ? data : '0x'];\n  if (signature) {\n    const v = (() => {\n      // EIP-155 (explicit chainId)\n      if (chainId > 0) return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n);\n      // EIP-155 (inferred chainId)\n      if (signature.v >= 35n) {\n        const inferredChainId = (signature.v - 35n) / 2n;\n        if (inferredChainId > 0) return signature.v;\n        return 27n + (signature.v === 35n ? 0n : 1n);\n      }\n      // Pre-EIP-155 (no chainId)\n      const v = 27n + (signature.v === 27n ? 0n : 1n);\n      if (signature.v !== v) throw new InvalidLegacyVError({\n        v: signature.v\n      });\n      return v;\n    })();\n    serializedTransaction = [...serializedTransaction, toHex(v), signature.r, signature.s];\n  } else if (chainId > 0) {\n    serializedTransaction = [...serializedTransaction, toHex(chainId), '0x', '0x'];\n  }\n  return toRlp(serializedTransaction);\n}","map":{"version":3,"names":["InvalidLegacyVError","concatHex","trim","toHex","toRlp","assertTransactionEIP1559","assertTransactionEIP2930","assertTransactionLegacy","getTransactionType","serializeAccessList","serializeTransaction","transaction","signature","type","serializeTransactionEIP1559","serializeTransactionEIP2930","serializeTransactionLegacy","chainId","gas","nonce","to","value","maxFeePerGas","maxPriorityFeePerGas","accessList","data","serializedAccessList","serializedTransaction","yParity","v","push","r","s","gasPrice","BigInt","inferredChainId"],"sources":["C:\\Users\\takap\\OneDrive - Chiba Institute of Technology\\デスクトップ\\web3-sotuken\\node_modules\\viem\\utils\\transaction\\serializeTransaction.ts"],"sourcesContent":["import {\n  InvalidLegacyVError,\n  type InvalidLegacyVErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Signature } from '../../types/misc.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionSerializedLegacy,\n  TransactionType,\n} from '../../types/transaction.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { trim } from '../data/trim.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\nimport { type ToRlpErrorType, toRlp } from '../encoding/toRlp.js'\n\nimport {\n  type AssertTransactionEIP1559ErrorType,\n  type AssertTransactionEIP2930ErrorType,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionLegacy,\n} from './assertTransaction.js'\nimport {\n  type GetTransactionType,\n  type GetTransationTypeErrorType,\n  getTransactionType,\n} from './getTransactionType.js'\nimport {\n  type SerializeAccessListErrorType,\n  serializeAccessList,\n} from './serializeAccessList.js'\n\nexport type SerializedTransactionReturnType<\n  TTransactionSerializable extends\n    TransactionSerializable = TransactionSerializable,\n  TTransactionType extends\n    TransactionType = GetTransactionType<TTransactionSerializable>,\n> = TransactionSerialized<TTransactionType>\n\nexport type SerializeTransactionFn<\n  TTransactionSerializable extends\n    TransactionSerializable = TransactionSerializable,\n> = typeof serializeTransaction<TTransactionSerializable>\n\nexport type SerializeTransactionErrorType =\n  | GetTransationTypeErrorType\n  | SerializeTransactionEIP1559ErrorType\n  | SerializeTransactionEIP2930ErrorType\n  | SerializeTransactionLegacyErrorType\n  | ErrorType\n\nexport function serializeTransaction<\n  TTransactionSerializable extends TransactionSerializable,\n>(\n  transaction: TTransactionSerializable,\n  signature?: Signature,\n): SerializedTransactionReturnType<TTransactionSerializable> {\n  const type = getTransactionType(transaction) as GetTransactionType\n\n  if (type === 'eip1559')\n    return serializeTransactionEIP1559(\n      transaction as TransactionSerializableEIP1559,\n      signature,\n    ) as SerializedTransactionReturnType<TTransactionSerializable>\n\n  if (type === 'eip2930')\n    return serializeTransactionEIP2930(\n      transaction as TransactionSerializableEIP2930,\n      signature,\n    ) as SerializedTransactionReturnType<TTransactionSerializable>\n\n  return serializeTransactionLegacy(\n    transaction as TransactionSerializableLegacy,\n    signature,\n  ) as SerializedTransactionReturnType<TTransactionSerializable>\n}\n\ntype SerializeTransactionEIP1559ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n  signature?: Signature,\n): TransactionSerializedEIP1559 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP1559(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n  ]\n\n  if (signature) {\n    const yParity = (() => {\n      if (signature.v === 0n) return '0x'\n      if (signature.v === 1n) return toHex(1)\n\n      return signature.v === 27n ? '0x' : toHex(1)\n    })()\n    serializedTransaction.push(yParity, trim(signature.r), trim(signature.s))\n  }\n\n  return concatHex([\n    '0x02',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP1559\n}\n\ntype SerializeTransactionEIP2930ErrorType =\n  | AssertTransactionEIP2930ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n  signature?: Signature,\n): TransactionSerializedEIP2930 {\n  const { chainId, gas, data, nonce, to, value, accessList, gasPrice } =\n    transaction\n\n  assertTransactionEIP2930(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    gasPrice ? toHex(gasPrice) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n  ]\n\n  if (signature) {\n    const yParity = (() => {\n      if (signature.v === 0n) return '0x'\n      if (signature.v === 1n) return toHex(1)\n\n      return signature.v === 27n ? '0x' : toHex(1)\n    })()\n    serializedTransaction.push(yParity, trim(signature.r), trim(signature.s))\n  }\n\n  return concatHex([\n    '0x01',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP2930\n}\n\ntype SerializeTransactionLegacyErrorType =\n  | AssertTransactionLegacyErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | ErrorType\n\nfunction serializeTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n  signature?: Signature,\n): TransactionSerializedLegacy {\n  const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction\n\n  assertTransactionLegacy(transaction)\n\n  let serializedTransaction = [\n    nonce ? toHex(nonce) : '0x',\n    gasPrice ? toHex(gasPrice) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n  ]\n\n  if (signature) {\n    const v = (() => {\n      // EIP-155 (explicit chainId)\n      if (chainId > 0)\n        return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n)\n\n      // EIP-155 (inferred chainId)\n      if (signature.v >= 35n) {\n        const inferredChainId = (signature.v - 35n) / 2n\n        if (inferredChainId > 0) return signature.v\n        return 27n + (signature.v === 35n ? 0n : 1n)\n      }\n\n      // Pre-EIP-155 (no chainId)\n      const v = 27n + (signature.v === 27n ? 0n : 1n)\n      if (signature.v !== v) throw new InvalidLegacyVError({ v: signature.v })\n      return v\n    })()\n\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(v),\n      signature.r,\n      signature.s,\n    ]\n  } else if (chainId > 0) {\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(chainId),\n      '0x',\n      '0x',\n    ]\n  }\n\n  return toRlp(serializedTransaction)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}